@using System.Linq.Expressions

<div class="form-check">
    <InputCheckbox class="@Class" id="@Id" Value="@Value" ValueChanged="@ValueChanged" ValueExpression="@ValueExpression" @attributes="AdditionalAttributes" />
    <label class="form-check-label" for="@Id">
        @Label
    </label>
</div>
@code {
    [Parameter(CaptureUnmatchedValues = true)] public IReadOnlyDictionary<string, object> AdditionalAttributes { get; set; }
    [Parameter] public string Id { get; set; }
    [Parameter] public string Class { get; set; }
    [Parameter] public string Label { get; set; }

    [Parameter] public bool Value { get; set; }
    [Parameter] public EventCallback<bool> ValueChanged { get; set; }
    [Parameter] public Expression<Func<bool>> ValueExpression { get; set; }

    protected override Task OnInitializedAsync()
    {
        this.Class = string.Join(' ', "form-check-input", this.Class);

        return base.OnInitializedAsync();
    }
}
