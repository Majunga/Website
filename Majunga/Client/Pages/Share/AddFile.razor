@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Majunga.Shared.ViewModels
@using Majunga.Shared
@using Majunga.Client.Shared.Components.Popup
@using Majunga.Client.Shared.Components.Forms

@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject AlertState AlertState

<Popup @ref="_popup" id="@Id" OnHide="@OnHide">
    <PopupHeader Hide="@(async () => await this._popup.Hide())">
        <h3>@(this.IsNewItem ? "Add" : "Edit") Bot</h3>
    </PopupHeader>
    <PopupBody>
        <EditorForm Model="@_model" OnValidSubmit="@HandleValidSubmitAsync">

            <EditorText id="name" @bind-Value="_model.Name" placeholder="Name" />
            <InputFile id="file" OnChange="OnInputFileChange" placeholder="FileBytes" />
            <br />

            <div class="btn-group float-right">
                <button type="button" class="btn btn-danger" @onclick="this._popup.Hide">Cancel</button>
                <button type="submit" class="btn btn-primary">Save</button>
            </div>
        </EditorForm>
    </PopupBody>
</Popup>

@code {
    public const string Id = "fileForm";

    private File _model = new File();
    private Popup _popup { get; set; }
    private bool IsNewItem => _model.Id == 0;

    [Parameter] public EventCallback OnHide { get; set; }

    private string Message = "No file(s) selected";
    private IBrowserFile selectedFile;

    private void OnInputFileChange(InputFileChangeEventArgs e)
    {
        selectedFile = e.GetMultipleFiles(1).FirstOrDefault();
        Message = $"{selectedFile.Name} file(s) selected";
        this.StateHasChanged();
    }

    public async Task Show()
    {
        await this.Show(new File());
    }

    public async Task Show(File model)
    {
        this._model = model;
        await this._popup.Show();
    }

    protected async Task HandleValidSubmitAsync()
    {
        try
        {
            var stream = selectedFile.OpenReadStream(512000000);

            var fileBuffer = new byte[selectedFile.Size];
            await stream.ReadAsync(fileBuffer);

            _model.FileBytes = fileBuffer;

            var response = await (this.IsNewItem ? Http.PostAsJsonAsync("/api/share/files", _model) : Http.PutAsJsonAsync($"/api/share/files/{_model.Id}", _model));

            if (response.IsSuccessStatusCode)
            {
                AlertState.Success($"File {(this.IsNewItem ? "created" : "updated")} successfully");
            }
            else
            {
                AlertState.Error("Something went wrong!");
            }
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }

        await this._popup.Hide();
    }
}

