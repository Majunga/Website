@page "/Share"

@inject HttpClient Http
@inject AlertState AlertState


<h3>File share</h3>

<div class="btn-group">
    <button type="button" class="btn btn-primary" @onclick="(async () => await addFile.Show())">Add</button>
</div>


@if (_model == null || _model.Count == 0)
{
    <Alert Type="@AlertType.Info">No files available</Alert>
}
else
{
    <Table>
        <THead>
            <Tr>
                <Th>Id</Th>
                <Th>Name</Th>
                <Th></Th>
            </Tr>
        </THead>
        <TBody>
            @foreach (var item in _model)
            {
                <Tr>
                    <Td>@item.Id</Td>
                    <Td>@item.Name</Td>
                    <Td class="float-right">
                        <div class="btn-group">
                            <button class="btn btn-success" @onclick="(async () => await shareFile.Show(item))">Copy</button>
                            <button class="btn btn-danger" @onclick="(async () => await this.DeleteAsync(item.Id))">Delete</button>
                        </div>
                    </Td>
                </Tr>
            }
        </TBody>
    </Table>
}

<AddFile @ref="addFile" OnHide="() => LoadGrid()"/>
<ShareFile @ref="shareFile" />

@code {
    private IReadOnlyCollection<FileView> _model;

    private AddFile addFile;
    private ShareFile shareFile;

    protected override async Task OnInitializedAsync() => await this.LoadGrid();

    private async Task LoadGrid()
    {
        try
        {
            _model = await Http.GetFromJsonAsync<IReadOnlyCollection<FileView>>("/api/share/files");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception ex)
        {
            AlertState.Error(ex.Message);
        }
    }

    protected async Task DeleteAsync(int id)
    {
        try
        {
            var response = await Http.DeleteAsync($"/api/share/files/{id}");

            if (response.IsSuccessStatusCode)
            {
                AlertState.Success("File deleted succesfully");
                await this.LoadGrid();
            }
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }
}
