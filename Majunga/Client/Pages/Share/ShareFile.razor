@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject AlertState AlertState

<Popup @ref="_popup" id="@Id" OnHide="@OnHide">
    <PopupHeader Hide="@(async () => await this._popup.Hide())">
        <h3>Share File</h3>
    </PopupHeader>
    <PopupBody>
        <button class="btn btn-success" @onclick='(() => NavigationManager.NavigateTo($"/share/sharefile/{_model.Id}/{WebUtility.UrlEncode(_model.Filename)}"))' name="ShareLink">View</button>
    </PopupBody>
    <PopupFooter>
        <button role="button" class="btn btn-primary" @onclick="() => _popup.Hide()">Close</button>
    </PopupFooter>
</Popup>
@code {
    public const string Id = "ShareLink";

    private Popup _popup { get; set; }

    [Parameter] public EventCallback OnHide { get; set; }

    private FileView _model;

    public async Task Show(FileView model)
    {
        _model = model;
        if (string.IsNullOrWhiteSpace(model.ShareLink))
        {
            model.CreateShareLink();
            var response = await Http.PutAsJsonAsync($"/api/share/files/{model.Id}", model);

            if (!response.IsSuccessStatusCode)
            {
                AlertState.Error($"Failed to create link {response.StatusCode}");
                return;
            }
        }

        await this._popup.Show();
    }
}


